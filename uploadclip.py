import cv2
import time
from datetime import datetime
from zoneinfo import ZoneInfo
import firebase_admin
from firebase_admin import credentials, storage, firestore
import os
import subprocess

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Remux ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏î‡πâ‡∏ß‡∏¢ ffmpeg
def fix_mp4_metadata(input_file, output_file):
    ffmpeg_path = r"C:\ffmpeg\ffmpeg.exe"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô path ffmpeg ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    subprocess.run([
        ffmpeg_path, "-i", input_file,
        "-c:v", "libx264", "-preset", "ultrafast", "-crf", "23",
        "-pix_fmt", "yuv420p",
        output_file
    ])

# ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Firebase
cred = credentials.Certificate("smart-class-e9661-firebase-adminsdk-fbsvc-bf137255f5.json")
firebase_admin.initialize_app(cred, {
    'storageBucket': 'smart-class-e9661.firebasestorage.app'
})
db = firestore.client()
bucket = storage.bucket()

os.makedirs("videos", exist_ok=True)

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏à‡∏≤‡∏Å RTSP
def record_rtsp_video(rtsp_url, duration_sec=60, output_path="output.mp4"):
    cap = cv2.VideoCapture(rtsp_url, cv2.CAP_FFMPEG)
    if not cap.isOpened():
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ")
        return None

    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    width = int(cap.get(3))
    height = int(cap.get(4))
    out = cv2.VideoWriter(output_path, fourcc, 20.0, (width, height))

    start_time = time.time()
    while time.time() - start_time < duration_sec:
        ret, frame = cap.read()
        if not ret:
            break
        out.write(frame)

    cap.release()
    out.release()
    return output_path

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏õ Firebase
def upload_to_firebase(file_path):
    filename = os.path.basename(file_path)
    blob = bucket.blob(f"videos/{filename}")
    blob.upload_from_filename(file_path)
    blob.make_public()

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏Ç‡πâ‡∏≤ Firestore
    db.collection("videos").add({
        "fileName": filename,
        "url": blob.public_url,
        "timestamp": datetime.utcnow()
    })

    print(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß: {blob.public_url}")

# ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
rtsp_url = "rtsp://smartclass:112233@192.168.1.118:554/stream1"

while True:
    timestamp = datetime.now(ZoneInfo("Asia/Bangkok")).strftime("%Y-%m-%d_%H%M%S")
    raw_file = f"videos/camera_{timestamp}_raw.mp4"
    fixed_file = f"videos/camera_{timestamp}.mp4"

    print("üî¥ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠...")
    result = record_rtsp_video(rtsp_url, duration_sec=60, output_path=raw_file)

    if result is None or not os.path.exists(raw_file):
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå raw video: {raw_file}, ‡∏Ç‡πâ‡∏≤‡∏°‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ")
        time.sleep(300)
        continue

    print("üõ†Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á Remux ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠...")
    fix_mp4_metadata(raw_file, fixed_file)

    if not os.path.exists(fixed_file):
        print(f"‚ùå Remux ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß, ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {fixed_file}, ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î")
        time.sleep(300)
        continue

    print("‚¨ÜÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏õ Firebase...")
    upload_to_firebase(fixed_file)

    # üßπ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå local ‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
    for f in [raw_file, fixed_file]:
        if os.path.exists(f):
            os.remove(f)
            print(f"üßπ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå local ‡πÅ‡∏•‡πâ‡∏ß: {f}")

    # ‡∏û‡∏±‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
    time.sleep(300)

